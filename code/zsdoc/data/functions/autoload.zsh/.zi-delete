  emulate -LR zsh
  setopt extendedglob warncreateglobal typesetsilent
  local -a opts match mbegin mend
  local MATCH; integer MBEGIN MEND _retval
  .zi-parse-opts delete "$@"
  builtin set -- "${reply[@]}"
  if (( $@[(I)-*] || OPTS[opt_-h,--help] )) { +zi-prehelp-usage-message delete $___opt_map[delete] $@; return 1; }
  local the_id="$1${${1:#(%|/)*}:+${2:+/}}$2"
  if (( OPTS[opt_-a,--all] )); then
    .zi-confirm "Prune all plugins in \`${ZI[PLUGINS_DIR]}'""and snippets in \`${ZI[SNIPPETS_DIR]}'?"?"command rm -rf ${${ZI[PLUGINS_DIR]%%[/[:space:]]##}:-${TMPDIR:-${TMPDIR:-/tmp}}/abcEFG312}/*~*/_local---zi(ND) ""${${ZI[SNIPPETS_DIR]%%[/[:space:]]##}:-${TMPDIR:-${TMPDIR:-/tmp}}/abcEFG312}/*~*/plugins(ND)"s(ND)"
    return $?
  fi
  if (( OPTS[opt_-c,--clean] )) {
    .zi-confirm "Prune ${ZI[col-info]}CURRENTLY NOT LOADED${ZI[col-rst]}"" plugins in $ZI[col-file]$ZI[PLUGINS_DIR]%f%b"" and snippets in $ZI[col-file]$ZI[SNIPPETS_DIR]%f%b?"%b?" # Delete unloaded snippets
local -aU loadedsnips todelete final_todelete
loadedsnips=( \${\${ZI_SNIPPETS[@]% <*>}/(#m)*/\$(.zi-get-object-path snippet \"\$MATCH\" && builtin print -rn \$REPLY; )} )
local dir=\${\${ZI[SNIPPETS_DIR]%%[/[:space:]]##}:-${TMPDIR:-${TMPDIR:-/tmp}}/xyzcba231}
todelete=( \$dir/*/*/*(ND/) \$dir/*/*(ND/) \$dir/*(ND/) )
final_todelete=( \${todelete[@]:#*/(\${(~j:|:)loadedsnips}|*/plugins|._backup|._zi|.svn|.git)(|/*)} )
final_todelete=( \${final_todelete[@]//(#m)*/\$( .zi-get-object-path snippet \"\${\${\${MATCH##\${dir}[/[:space:]]#}/(#i)(#b)(http(s|)|ftp(s|)|ssh|rsync)--/\${match[1]##--}://}//--//}\" && builtin print -r -- \$REPLY)} )
final_todelete=( \${final_todelete[@]:#(\${(~j:|:)loadedsnips}|*/plugins|*/._backup|*/._zi|*/.svn|*/.git)(|/*)} )
todelete=( \${\${\${(@)\${(@)final_todelete##\$dir/#}//(#i)(#m)(http(s|)|ftp(s|)|ssh|rsync)--/\${MATCH%--}://}//--//}//(#b)(*)\/([^\/]##)(#e)/\$match[1]/\$ZI[col-file]\$match[2]\$ZI[col-rst]} )
todelete=( \${todelete[@]//(#m)(#s)[^\/]##(#e)/\$ZI[col-file]\$MATCH\$ZI[col-rst]} )
final_todelete=( \${\${\${(@)\${(@)final_todelete##\$dir/#}//(#i)(#m)(http(s|)|ftp(s|)|ssh|rsync)--/\${MATCH%--}://}//--//}//(#b)(*)\/([^\/]##)(#e)/\$match[1]/\$match[2]} )
builtin print; print -Prln \"\$ZI[col-obj]Deleting the following \"\"\$ZI[col-file]\${#todelete}\$ZI[col-msg2] UNLOADED\$ZI[col-obj] snippets:%f%b\" \$todelete \"%f%b\"
sleep 3
local snip
for snip ( \$final_todelete ) { zi delete -q -y \$snip; _retval+=\$?; }
builtin print -Pr \"\$ZI[col-obj]Done (with the exit code: \$_retval).%f%b\"

# Next delete unloaded plugins
local -a dirs
dirs=( \${\${ZI[PLUGINS_DIR]%%[/[:space:]]##}:-${TMPDIR:-${TMPDIR:-/tmp}}/abcEFG312}/*~*/(\${(~j:|:)\${ZI_REGISTERED_PLUGINS[@]//\//---}})(ND/) )
dirs=( \${(@)\${dirs[@]##\$ZI[PLUGINS_DIR]/#}//---//} )
builtin print -Prl \"\" \"\$ZI[col-obj]Deleting the following \"\"\$ZI[col-file]\${#dirs}\$ZI[col-msg2] UNLOADED\$ZI[col-obj] plugins:%f%b\" \${\${dirs//(#b)(*)(\/([^\/]##))(#e)/\${\${match[2]:+\$ZI[col-uname]\$match[1]\$ZI[col-rst]/\$ZI[col-pname]\$match[3]\$ZI[col-rst]}:-\$ZI[col-pname]\$match[1]}}//(#b)(^\$ZI[col-uname])(*)/\$ZI[col-pname]\$match[1]}
sleep 3
for snip ( \$dirs ) { zi delete -q -y \$snip; _retval+=\$?; }
builtin print -Pr \"\$ZI[col-obj]Done (with the exit code: \$_retval).%f%b\""val).%f%b\""
    return _retval
  }

  local -A ICE2
  local local_dir filename is_snippet
  .zi-compute-ice "$the_id" "pack" \
    ICE2 local_dir filename is_snippet || return 1
  if [[ "$local_dir" != /* ]]
  then
    builtin print "Obtained a risky, not-absolute path ($local_dir), aborting"
    return 1
  fi

  ICE2[teleid]="${ICE2[teleid]:-${ICE2[id-as]}}"

  local -a files
  files=( "$local_dir"/*.(zsh|sh|bash|ksh)(DN:t)
    "$local_dir"/*(*DN:t) "$local_dir"/*(@DN:t) "$local_dir"/*(.DN:t)
    "$local_dir"/*~*/.(_zi|svn|git)(/DN:t) "$local_dir"/*(=DN:t)
    "$local_dir"/*(pDN:t) "$local_dir"/*(%DN:t)
  )
  (( !${#files} )) && files=( "no files?" )
  files=( ${(@)files[1,4]} ${files[4]+moreâ€¦} )
  local -A ICE
  ICE=( "${(kv)ICE2[@]}" )
  if (( is_snippet )); then
    if [[ "${+ICE2[svn]}" = "1" ]] {
      if [[ -e "$local_dir" ]]
      then
        .zi-confirm "Delete $local_dir? (it holds: ${(j:, :)${(@u)files}})" \
          ".zi-run-delete-hooks snippet \"${ICE2[teleid]}\" \"\" \"$the_id\"           \"$local_dir\";           command rm -rf ${(q)${${local_dir:#[/[:space:]]##}:-${TMPDIR:-${TMPDIR:-/tmp}}/abcYZX321}}"1}}"
      else
        builtin print "No such snippet"
        return 1
      fi
    } else {
      if [[ -e "$local_dir" ]]; then
        .zi-confirm "Delete $local_dir? (it holds: ${(j:, :)${(@u)files}})" \
          ".zi-run-delete-hooks snippet \"${ICE2[teleid]}\" \"\" \"$the_id\"           \"$local_dir\"; command rm -rf             ${(q)${${local_dir:#[/[:space:]]##}:-${TMPDIR:-${TMPDIR:-/tmp}}/abcYZX321}}"1}}"
      else
        builtin print "No such snippet"
        return 1
      fi
    }
  else
    .zi-any-to-user-plugin "${ICE2[teleid]}"
    if [[ -e "$local_dir" ]]; then
      .zi-confirm "Delete $local_dir? (it holds: ${(j:, :)${(@u)files}})" \
        ".zi-run-delete-hooks plugin \"${reply[-2]}\" \"${reply[-1]}\" \"$the_id\"         \"$local_dir\";         command rm -rf ${(q)${${local_dir:#[/[:space:]]##}:-${TMPDIR:-${TMPDIR:-/tmp}}/abcYZX321}}"1}}"
    else
      builtin print -r -- "No such plugin or snippet"
      return 1
    fi
  fi
  return 0
