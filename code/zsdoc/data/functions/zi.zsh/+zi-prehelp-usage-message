builtin emulate -LR zsh -o extendedglob
local cmd=$1 allowed=$2 sep="$ZI[col-msg2], $ZI[col-ehi]" \
  sep2="$ZI[col-msg2], $ZI[col-opt]" bcol
if (( OPTS[opt_-h,--help] )) {
  +zi-message "{lhi}HELP FOR {apo}\`{cmd}$cmd{apo}\`{lhi} subcommand {mdsh}" "the available {b-lhi}options{ehi}:{rst}"
  local opt
  for opt ( ${(kos:|:)allowed} ) {
    [[ $opt == --* ]] && continue
    local msg=${___opt_map[$opt]#*:} txt=${___opt_map[(r)opt_$opt,--[^:]##]}
    if [[ $msg == *":["* ]] {
      msg=${${(MS)msg##$cmd:\[[^]]##}:-${(MS)msg##\*:\[[^]]##}}
      msg=${msg#($cmd|\*):\[}
    }
    local pre_msg=`+zi-message -n {opt}${(r:14:)${txt#opt_}}`
    +zi-message ${(r:35:: :)pre_msg}{rst}{ehi}→{rst}"  $msg"
  }
} elif [[ -n $allowed ]] {
  shift 2
  +zi-message "{b}{u-warn}ERROR{b-warn}:{rst}{msg2} Incorrect options given{ehi}:" "${(Mpj:$sep:)@:#-*}{rst}{msg2}. Allowed for the subcommand{ehi}:{rst}" \
  "{apo}\`{cmd}$cmd{apo}\`{msg2} are{ehi}:{rst}" "{nl}{mmdsh} {opt}${allowed//\|/$sep2}{msg2}." "{nl}{…} Aborting.{rst}"
} else {
  local -a cmds
  cmds=( load snippet update delete )
  local bcol="{$cmd}" sep="${ZI[col-rst]}${ZI[col-$cmd]}\`, \`${ZI[col-cmd]}"
  +zi-message "$bcol(it should be one of, e.g.{ehi}:" \
  "{nb}$bcol\`{cmd}${(pj:$sep:)cmds}$bcol\`," \
  "{cmd}{…}$bcol, e.g.{ehi}: {nb}$bcol\`{lhi}zi {b}{cmd}load" \
  "{pid}username/reponame$bcol\`) or a {b}{hi}for{nb}$bcol-based" \
  "command body (i.e.{ehi}:{rst}$bcol e.g.{ehi}: {rst}$bcol\`{lhi}zi" \
    "{…}{b}ice-spec{nb}{…} {hi}for{nb}{lhi} {…}({b}plugin" \
    "{nb}or{b} snippet) {pname}ID-1 ID-2 {-…} {lhi}{…}$bcol\`)." \
  "See \`{cmd}help$bcol\` for a more detailed usage information and" \
  "the list of the {cmd}subcommands$bcol.{rst}"
}
