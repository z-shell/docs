typeset -F 3 SECONDS=0
local ___mode="$3" ___rst=0 ___retval=0 ___key
.zi-any-to-user-plugin "$1" "$2"
local ___user="${reply[-2]}" ___plugin="${reply[-1]}" ___id_as="${ICE[id-as]:-${reply[-2]}${${reply[-2]:#(%|/)*}:+/}${reply[-1]}}"
local ___pdir_path="${${${(M)___user:#%}:+$___plugin}:-${ZI[PLUGINS_DIR]}/${___id_as//\//---}}"
local ___pdir_orig="$___pdir_path"
ZI[CUR_USR]="$___user" ZI[CUR_PLUGIN]="$___plugin" ZI[CUR_USPL2]="$___id_as"
if [[ -n ${ICE[teleid]} ]] {
  .zi-any-to-user-plugin "${ICE[teleid]}"
  ___user="${reply[-2]}" ___plugin="${reply[-1]}"
} else {
  ICE[teleid]="$___user${${___user:#%}:+/}$___plugin"
}
.zi-set-m-func set
local -a ___arr
reply=(
  ${(on)ZI_EXTS2[(I)zi hook:preinit-pre <->]}
  ${(on)ZI_EXTS[(I)z-annex hook:preinit-<-> <->]}
  ${(on)ZI_EXTS2[(I)zi hook:preinit-post <->]}
)
for ___key in "${reply[@]}"; do
  ___arr=( "${(Q)${(z@)ZI_EXTS[$___key]:-$ZI_EXTS2[$___key]}[@]}" )
  "${___arr[5]}" plugin "$___user" "$___plugin" "$___id_as" "$___pdir_orig" "${${___key##(zi|z-annex) hook:}%% <->}" load || return $(( 10 - $? ))
done
if [[ $___user != % && ! -d ${ZI[PLUGINS_DIR]}/${___id_as//\//---} ]] {
  (( ${+functions[.zi-setup-plugin-dir]} )) || builtin source "${ZI[BIN_DIR]}/lib/zsh/install.zsh" || return 1
  reply=( "$___user" "$___plugin" ) REPLY=github
  if (( ${+ICE[pack]} )) {
    if ! .zi-get-package "$___user" "$___plugin" "$___id_as" "${ZI[PLUGINS_DIR]}/${___id_as//\//---}" "${ICE[pack]:-default}"
    then
      zle && { builtin print; zle .reset-prompt; }
      return 1
    fi
    ___id_as="${ICE[id-as]:-${___user}${${___user:#(%|/)*}:+/}$___plugin}"
  }
  ___user="${reply[-2]}" ___plugin="${reply[-1]}"
  ICE[teleid]="$___user${${___user:#(%|/)*}:+/}$___plugin"
  [[ $REPLY = snippet ]] && {
    ICE[id-as]="${ICE[id-as]:-$___id_as}"
    .zi-load-snippet $___plugin && return
    zle && { builtin print; zle .reset-prompt; }
    return 1
  }
  if ! .zi-setup-plugin-dir "$___user" "$___plugin" "$___id_as" "$REPLY"; then
    zle && { builtin print; zle .reset-prompt; }
    return 1
  fi
  zle && ___rst=1
}
ZI_SICE[$___id_as]=
.zi-pack-ice "$___id_as"
(( ${+ICE[cloneonly]} )) && return 0
.zi-register-plugin "$___id_as" "$___mode" "${ICE[teleid]}"
if [[ -n ${ICE[param]} ]] {
  .zi-setup-params && local ${(Q)reply[@]}
}
reply=( ${(on)ZI_EXTS[(I)z-annex hook:\\\!atinit-<-> <->]} )
for ___key in "${reply[@]}"; do
  ___arr=( "${(Q)${(z@)ZI_EXTS[$___key]}[@]}" )
  "${___arr[5]}" plugin "$___user" "$___plugin" "$___id_as" "${${${(M)___user:#%}:+$___plugin}:-${ZI[PLUGINS_DIR]}/${___id_as//\//---}}" \!atinit || return $(( 10 - $? ))
done
[[ ${+ICE[atinit]} = 1 && $ICE[atinit] != '!'*   ]] && { local ___oldcd="$PWD"; (( ${+ICE[nocd]} == 0 )) && { () { setopt localoptions noautopushd; builtin cd -q "${${${(M)___user:#%}:+$___plugin}:-${ZI[PLUGINS_DIR]}/${___id_as//\//---}}"; } && eval "${ICE[atinit]}"; ((1)); } || eval "${ICE[atinit]}"; () { setopt localoptions noautopushd; builtin cd -q "$___oldcd"; }; }
reply=( ${(on)ZI_EXTS[(I)z-annex hook:atinit-<-> <->]} )
for ___key in "${reply[@]}"; do
  ___arr=( "${(Q)${(z@)ZI_EXTS[$___key]}[@]}" )
  "${___arr[5]}" plugin "$___user" "$___plugin" "$___id_as" "${${${(M)___user:#%}:+$___plugin}:-${ZI[PLUGINS_DIR]}/${___id_as//\//---}}" atinit || return $(( 10 - $? ))
done
.zi-load-plugin "$___user" "$___plugin" "$___id_as" "$___mode" "$___rst"; ___retval=$?
(( ${+ICE[notify]} == 1 )) && { [[ $___retval -eq 0 || -n ${(M)ICE[notify]#\!} ]] && { local msg; eval "msg=\"${ICE[notify]#\!}\""; +zi-deploy-message @msg "$msg" } || +zi-deploy-message @msg "notify: Plugin not loaded / loaded with problem, the return code: $___retval"; }
(( ${+ICE[reset-prompt]} == 1 )) && +zi-deploy-message @___rst
.zi-set-m-func unset
ZI[CUR_USR]= ZI[CUR_PLUGIN]= ZI[CUR_USPL2]=
ZI[TIME_INDEX]=$(( ${ZI[TIME_INDEX]:-0} + 1 ))
ZI[TIME_${ZI[TIME_INDEX]}_${___id_as//\//---}]=$SECONDS
ZI[AT_TIME_${ZI[TIME_INDEX]}_${___id_as//\//---}]=$EPOCHREALTIME
return ___retval
