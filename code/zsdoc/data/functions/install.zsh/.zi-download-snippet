emulate -LR zsh
setopt extendedglob warncreateglobal typesetsilent

local save_url=$1 url=$2 id_as=$3 local_dir=$4 dirname=$5 filename=$6 update=$7

trap "command rmdir ${(qqq)local_dir}/${(qqq)dirname} 2>/dev/null; return 1;" INT TERM QUIT HUP

local -a list arr
integer retval
local teleid_clean=${ICE[teleid]%%\?*}
[[ $teleid_clean == *://* ]] && \
  local sname=${(M)teleid_clean##*://[^/]##(/[^/]##)(#c0,4)} || \
  local sname=${${teleid_clean:h}:t}/${teleid_clean:t}
[[ $sname = */trunk* ]] && sname=${${ICE[teleid]%%/trunk*}:t}/${ICE[teleid]:t}
sname=${sname#./}

if (( ${+ICE[svn]} )) {
  [[ $url = *(${(~kj.|.)${(Mk)ZI_1MAP:#OMZ*}}|robbyrussell*oh-my-zsh|ohmyzsh/ohmyzsh)* ]] && local ZSH=${ZI[SNIPPETS_DIR]}
  url=${url/(#s)(#m)(${(~kj.|.)ZI_1MAP})/$ZI_1MAP[$MATCH]}
} else {
  url=${url/(#s)(#m)(${(~kj.|.)ZI_2MAP})/$ZI_2MAP[$MATCH]}
  if [[ $save_url == (${(~kj.|.)${(Mk)ZI_1MAP:#OMZ*}})* ]] {
    if [[ $url != *.zsh(|-theme) && $url != */_[^/]## ]] {
      if [[ $save_url == OMZT::* ]] {
        url+=.zsh-theme
      } else {
        url+=/${${url#*::}:t}.plugin.zsh
      }
    }
  } elif [[ $save_url = (${(~kj.|.)${(kM)ZI_1MAP:#PZT*}})* ]] {
    if [[ $url != *.zsh && $url != */_[^/]## ]] {
      url+=/init.zsh
    }
  }
}
if [[ "$url" = *github.com* && ! "$url" = */raw/* && "${+ICE[svn]}" = "0" ]] {
  url="${${url/\/blob\///raw/}/\/tree\///raw/}"
}

command rm -f ${TMPDIR:-/tmp}/zi-execs.$$.lst ${TMPDIR:-/tmp}/zi.installed_comps.$$.lst \
${TMPDIR:-/tmp}/zi.skipped_comps.$$.lst ${TMPDIR:-/tmp}/zi.compiled.$$.lst

if [[ ! -d $local_dir/$dirname ]]; then
  local id_msg_part="{…} (at label{ehi}:{rst} {id-as}$id_as{rst})"
  [[ $update != -u ]] && +zi-message "{nl}{info}Setting up snippet:" "{url}$sname{rst}${ICE[id-as]:+$id_msg_part}"
  command mkdir -p "$local_dir"
fi

if [[ $update = -u && ${OPTS[opt_-q,--quiet]} != 1 ]]; then
  local id_msg_part="{…} (identified as{ehi}:{rst} {id-as}$id_as{rst})"
  +zi-message "{nl}{info2}Updating snippet: {url}$sname{rst}${ICE[id-as]:+$id_msg_part}"
fi
ZI[annex-multi-flag:pull-active]=${${${(M)update:#-u}:+${ZI[annex-multi-flag:pull-active]}}:-2}
(
  if [[ $url = (http|https|ftp|ftps|scp)://* ]] {
    (
      () { setopt localoptions noautopushd; builtin cd -q "$local_dir"; } || return 4
      (( !OPTS[opt_-q,--quiet] )) && +zi-message "Downloading {apo}\`{url}$sname{apo}\`{rst}${${ICE[svn]+"         (with Subversion)"}:-" (with curl, wget, lftp)"}{…}"}"

      if (( ${+ICE[svn]} )) {
        if [[ $update = -u ]] {
          if ! .zi-mirror-using-svn "$url" "-t" "$dirname"; then
            if (( ${+ICE[run-atpull]} || OPTS[opt_-u,--urge] )) {
              ZI[annex-multi-flag:pull-active]=1
            } else { return 0; }
          else
            ZI[annex-multi-flag:pull-active]=2
          fi
          reply=(
            ${(on)ZI_EXTS2[(I)zi hook:e-\\\!atpull-pre <->]}
            ${${(M)ICE[atpull]#\!}:+${(on)ZI_EXTS[(I)z-annex hook:\\\!atpull-<-> <->]}}
            ${(on)ZI_EXTS2[(I)zi hook:e-\\\!atpull-post <->]}
          )
          for key in "${reply[@]}"; do
            arr=( "${(Q)${(z@)ZI_EXTS[$key]:-$ZI_EXTS2[$key]}[@]}" )
            "${arr[5]}" snippet "$save_url" "$id_as" "$local_dir/$dirname" "${${key##(zi|z-annex) hook:}%% <->}" update:svn
          done

          if (( ZI[annex-multi-flag:pull-active] == 2 )) {
            if (( OPTS[opt_-q,--quiet] )); then
              local id_msg_part="{…} (identified as{ehi}: {id-as}$id_as{rst})"
              +zi-message "{nl}{info2}Updating snippet {url}${sname}{rst}${ICE[id-as]:+$id_msg_part}"
              +zi-message "Downloading {apo}\`{rst}$sname{apo}\`{rst} (with Subversion){…}"
            fi
            .zi-mirror-using-svn "$url" "-u" "$dirname" || return 4
          }
        } else {
          .zi-mirror-using-svn "$url" "" "$dirname" || return 4
        }
        if [[ ${ICE[as]} != command ]]; then
          if [[ -n ${ICE[pick]} ]]; then
            list=( ${(M)~ICE[pick]##/*}(DN) $local_dir/$dirname/${~ICE[pick]}(DN) )
          elif [[ -z ${ICE[pick]} ]]; then
            list=(
              $local_dir/$dirname/*.plugin.zsh(DN) $local_dir/$dirname/*.zsh-theme(DN) $local_dir/$dirname/init.zsh(DN)
              $local_dir/$dirname/*.zsh(DN) $local_dir/$dirname/*.sh(DN) $local_dir/$dirname/.zshrc(DN)
            )
          fi
          if [[ -e ${list[1]} && ${list[1]} != */dev/null && -z ${ICE[(i)(\!|)(sh|bash|ksh|csh)]} && ${+ICE[nocompile]} -eq 0 ]] {
            () {
              builtin emulate -LR zsh -o extendedglob
              zcompile -U "${list[1]}" &>/dev/null || \
                +zi-message "{u-warn}Warning{b-warn}:{rst} couldn't compile {apo}\`{file}${list[1]}{apo}\`{rst}."
            }
          }
        fi

        return $ZI[annex-multi-flag:pull-active]
      } else {
        command mkdir -p "$local_dir/$dirname"

        if (( !OPTS[opt_-f,--force] )) {
          .zi-get-url-mtime "$url"
        } else {
          REPLY=$EPOCHSECONDS
        }

        local secs=$(( EPOCHSECONDS - REPLY ))
        (( $secs >= 0 )) || secs=0
        integer skip_dl
        local -a matched
        matched=( $local_dir/$dirname/$filename(DNms-$secs) )
        if (( ${#matched} )) {
          +zi-message "{info}Already up to date.{rst}"
          (( ${+ICE[run-atpull]} || OPTS[opt_-u,--urge] )) && skip_dl=1 || return 0
        }
        if [[ ! -f $local_dir/$dirname/$filename ]] {
          ZI[annex-multi-flag:pull-active]=2
        } else {
          ZI[annex-multi-flag:pull-active]=$(( secs > 1 ? (2 - skip_dl) : 3 ))
        }
        if [[ $update = -u && $ZI[annex-multi-flag:pull-active] -ge 1 ]] {
          reply=(
            ${(on)ZI_EXTS2[(I)zi hook:e-\\\!atpull-pre <->]}
            ${${ICE[atpull]#\!}:+${(on)ZI_EXTS[(I)z-annex hook:\\\!atpull-<-> <->]}}
            ${(on)ZI_EXTS2[(I)zi hook:e-\\\!atpull-post <->]}
          )
          for key in "${reply[@]}"; do
            arr=( "${(Q)${(z@)ZI_EXTS[$key]:-$ZI_EXTS2[$key]}[@]}" )
            "${arr[5]}" snippet "$save_url" "$id_as" "$local_dir/$dirname" "${${key##(zi|z-annex) hook:}%% <->}" update:url
          done
        }

        if (( !skip_dl )) {
          if { ! .zi-download-file-stdout "$url" 0 1 >| "$dirname/$filename" } {
            if { ! .zi-download-file-stdout "$url" 1 1 >| "$dirname/$filename" } {
              command rm -f "$dirname/$filename"
              +zi-message "{u-warn}ERROR{b-warn}:{rst} Download failed."
              return 4
            }
          }
        }
        return $ZI[annex-multi-flag:pull-active]
      }
    )
    retval=$?
    ZI[annex-multi-flag:pull-active]=$retval

    if [[ $ICE[as] != command && ${+ICE[svn]} -eq 0 ]] {
      local file_path=$local_dir/$dirname/$filename
      if [[ -n ${ICE[pick]} ]]; then
        list=( ${(M)~ICE[pick]##/*}(DN) $local_dir/$dirname/${~ICE[pick]}(DN) )
        file_path=${list[1]}
      fi
      if [[ -e $file_path && -z ${ICE[(i)(\!|)(sh|bash|ksh|csh)]} && $file_path != */dev/null && ${+ICE[nocompile]} -eq 0 ]] {
        () {
          builtin emulate -LR zsh -o extendedglob
          if ! zcompile -U "$file_path" 2>/dev/null; then
            builtin print -r "Couldn't compile \`${file_path:t}', it MIGHT be wrongly downloaded"
            builtin print -r "(snippet URL points to a directory instead of a file?"
            builtin print -r "to download directory, use preceding: zi ice svn)."
            retval=4
          fi
        }
      }
    }
  } else {
    ZI[annex-multi-flag:pull-active]=3 retval=3
    if [[ $update = -u ]] {
      reply=(
        ${(on)ZI_EXTS2[(I)zi hook:e-\\\!atpull-pre <->]}
        ${${(M)ICE[atpull]#\!}:+${(on)ZI_EXTS[(I)z-annex hook:\\\!atpull-<-> <->]}}
        ${(on)ZI_EXTS2[(I)zi hook:e-\\\!atpull-post <->]}
      )
      for key in "${reply[@]}"; do
        arr=( "${(Q)${(z@)ZI_EXTS[$key]:-$ZI_EXTS2[$key]}[@]}" )
        "${arr[5]}" snippet "$save_url" "$id_as" "$local_dir/$dirname" "${${key##(zi|z-annex) hook:}%% <->}" update:file
      done
    }

    command mkdir -p "$local_dir/$dirname"
    if [[ ! -e $url ]] {
      (( !OPTS[opt_-q,--quiet] )) && +zi-message "{ehi}ERROR:{error} The source file {file}$url{error} doesn't exist.{rst}"
      retval=4
    }
    if [[ -e $url && ! -f $url && $url != /dev/null ]] {
      (( !OPTS[opt_-q,--quiet] )) && +zi-message "{ehi}ERROR:{error} The source {file}$url{error} isn't a regular file.{rst}"
      retval=4
    }
    if [[ -e $url && ! -r $url && $url != /dev/null ]] {
      (( !OPTS[opt_-q,--quiet] )) && +zi-message "{ehi}ERROR:{error} The source {file}$url{error} isn't" \
        "accessible (wrong permissions).{rst}"
      retval=4
    }
    if (( !OPTS[opt_-q,--quiet] )) && [[ $url != /dev/null ]] {
      +zi-message "{msg}Copying {file}$filename{msg}{…}{rst}"
      command cp -vf "$url" "$local_dir/$dirname/$filename" || \
        { +zi-message "{ehi}ERROR:{error} The file copying has been unsuccessful.{rst}"; retval=4; }
    } else {
      command cp -f "$url" "$local_dir/$dirname/$filename" &>/dev/null || \
        { +zi-message "{ehi}ERROR:{error} The copying of {file}$filename{error} has been unsuccessful"\
          "${${(M)OPTS[opt_-q,--quiet]:#1}:+, skip the -q/--quiet option for more information}.{rst}"; retval=4; }
    }
  }

  (( retval == 4 )) && { command rmdir "$local_dir/$dirname" 2>/dev/null; return $retval; }

  if [[ ${${:-$local_dir/$dirname}%%/##} != ${ZI[SNIPPETS_DIR]} ]] {
    local pfx=$local_dir/$dirname/._zi
    .zi-store-ices "$pfx" ICE url_rsvd "" "$save_url" "${+ICE[svn]}"
  } elif [[ -n $id_as ]] {
    +zi-message "{u-warn}Warning{b-warn}:{rst} the snippet {url}$id_as{rst} isn't" \
      "fully downloaded – you should remove it with {apo}\`{cmd}zi delete $id_as{apo}\`{rst}."
  }
  if (( ZI[annex-multi-flag:pull-active] == 0 )) {
    reply=(
      ${(on)ZI_EXTS2[(I)zi hook:%atpull-pre <->]}
      ${(on)ZI_EXTS[(I)z-annex hook:%atpull-<-> <->]}
      ${(on)ZI_EXTS2[(I)zi hook:%atpull-post <->]}
    )
    for key in "${reply[@]}"; do
      arr=( "${(Q)${(z@)ZI_EXTS[$key]:-$ZI_EXTS2[$key]}[@]}" )
    done
    return 0;
  }

  if [[ $update = -u ]] {
    reply=(
      ${(on)ZI_EXTS2[(I)zi hook:no-e-\\\!atpull-pre <->]}
      ${${ICE[atpull]:#\!*}:+${(on)ZI_EXTS[(I)z-annex hook:\\\!atpull-<-> <->]}}
      ${(on)ZI_EXTS2[(I)zi hook:no-e-\\\!atpull-post <->]}
    )
    for key in "${reply[@]}"; do
      arr=( "${(Q)${(z@)ZI_EXTS[$key]:-$ZI_EXTS2[$key]}[@]}" )
      "${arr[5]}" snippet "$save_url" "$id_as" "$local_dir/$dirname" "${${key##(zi|z-annex) hook:}%% <->}" update
    done
  } else {
    reply=(
      ${(on)ZI_EXTS2[(I)zi hook:\\\!atclone-pre <->]}
      ${(on)ZI_EXTS[(I)z-annex hook:\\\!atclone-<-> <->]}
      ${(on)ZI_EXTS2[(I)zi hook:\\\!atclone-post <->]}
    )
    for key in "${reply[@]}"; do
      arr=( "${(Q)${(z@)ZI_EXTS[$key]:-$ZI_EXTS2[$key]}[@]}" )
      "${arr[5]}" snippet "$save_url" "$id_as" "$local_dir/$dirname" "${${key##(zi|z-annex) hook:}%% <->}" load
    done

    reply=(
      ${(on)ZI_EXTS2[(I)zi hook:atclone-pre <->]}
      ${(on)ZI_EXTS[(I)z-annex hook:atclone-<-> <->]}
      ${(on)ZI_EXTS2[(I)zi hook:atclone-post <->]}
    )
    for key in "${reply[@]}"; do
      arr=( "${(Q)${(z@)ZI_EXTS[$key]:-$ZI_EXTS2[$key]}[@]}" )
      "${arr[5]}" snippet "$save_url" "$id_as" "$local_dir/$dirname" "${${key##(zi|z-annex) hook:}%% <->}" load
    done
  }
  if [[ $update = -u ]] {
    if (( ZI[annex-multi-flag:pull-active] > 0 )) {
      reply=(
        ${(on)ZI_EXTS2[(I)zi hook:atpull-pre <->]}
        ${(on)ZI_EXTS[(I)z-annex hook:atpull-<-> <->]}
        ${(on)ZI_EXTS2[(I)zi hook:atpull-post <->]}
      )
      for key in "${reply[@]}"; do
        arr=( "${(Q)${(z@)ZI_EXTS[$key]:-$ZI_EXTS2[$key]}[@]}" )
        "${arr[5]}" snippet "$save_url" "$id_as" "$local_dir/$dirname" "${${key##(zi|z-annex) hook:}%% <->}" update
      done
    }
    reply=(
      ${(on)ZI_EXTS2[(I)zi hook:%atpull-pre <->]}
      ${(on)ZI_EXTS[(I)z-annex hook:%atpull-<-> <->]}
      ${(on)ZI_EXTS2[(I)zi hook:%atpull-post <->]}
    )
    for key in "${reply[@]}"; do
      arr=( "${(Q)${(z@)ZI_EXTS[$key]:-$ZI_EXTS2[$key]}[@]}" )
      "${arr[5]}" snippet "$save_url" "$id_as" "$local_dir/$dirname" "${${key##(zi|z-annex) hook:}%% <->}" update:$ZI[annex-multi-flag:pull-active]
    done
  }
  ((1))
) || return $?
typeset -ga INSTALLED_EXECS
{ INSTALLED_EXECS=( "${(@f)$(<${TMPDIR:-/tmp}/zi-execs.$$.lst)}" ) } 2>/dev/null
local -A OPTS
OPTS[opt_-q,--quiet]=1
[[ 0 = ${+ICE[nocompletions]} && ${ICE[as]} != null && ${+ICE[null]} -eq 0 ]] && \
  .zi-install-completions "%" "$local_dir/$dirname" 0
if [[ -e ${TMPDIR:-/tmp}/zi.skipped_comps.$$.lst || -e ${TMPDIR:-/tmp}/zi.installed_comps.$$.lst ]] {
  typeset -ga INSTALLED_COMPS SKIPPED_COMPS
  { INSTALLED_COMPS=( "${(@f)$(<${TMPDIR:-/tmp}/zi.installed_comps.$$.lst)}" ) } 2>/dev/null
  { SKIPPED_COMPS=( "${(@f)$(<${TMPDIR:-/tmp}/zi.skipped_comps.$$.lst)}" ) } 2>/dev/null
}
if [[ -e ${TMPDIR:-/tmp}/zi.compiled.$$.lst ]] {
  typeset -ga ADD_COMPILED
  { ADD_COMPILED=( "${(@f)$(<${TMPDIR:-/tmp}/zi.compiled.$$.lst)}" ) } 2>/dev/null
}
(( !OPTS[opt_-p,--parallel] )) && rehash

return $retval
