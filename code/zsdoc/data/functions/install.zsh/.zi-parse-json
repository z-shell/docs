emulate -LR zsh
setopt extendedglob warncreateglobal typesetsilent

local -A ___pos_to_level ___level_to_pos ___pair_map ___final_pairs ___Strings ___Counts
local ___input=$1 ___workbuf=$1 ___key=$2 ___varname=$3 ___style ___quoting
integer ___nest=${4:-1} ___idx=0 ___pair_idx ___level=0 ___start ___end ___sidx=1 ___had_quoted_value=0
local -a match mbegin mend ___pair_order
(( ${(P)+___varname} )) || typeset -gA "$___varname"
___pair_map=( "{" "}" "[" "]" )

while [[ $___workbuf = (#b)[^"{}[]\\\"'":,]#((["{[]}\"'":,])|[\\](*))(*) ]]; do
  if [[ -n ${match[3]} ]] {
    ___idx+=${mbegin[1]}

    [[ $___quoting = \' ]] && \
      { ___workbuf=${match[3]}; } || \
      { ___workbuf=${match[3]:1}; (( ++ ___idx )); }
  } else {
    ___idx+=${mbegin[1]}
    if [[ -z $___quoting ]] {
      if [[ ${match[1]} = ["({["] ]]; then
        ___Strings[$___level/${___Counts[$___level]}]+=" $'\0'--object--$'\0'"
        ___pos_to_level[$___idx]=$(( ++ ___level ))
        ___level_to_pos[$___level]=$___idx
        (( ___Counts[$___level] += 1 ))
        ___sidx=___idx+1
        ___had_quoted_value=0
      elif [[ ${match[1]} = ["]})"] ]]; then
        (( !___had_quoted_value )) && \
          ___Strings[$___level/${___Counts[$___level]}]+=" ${(q)___input[___sidx,___idx-1]//((#s)[[:blank:]]##|([[:blank:]]##(#e)))}"
        ___had_quoted_value=1
        if (( ___level > 0 )); then
          ___pair_idx=${___level_to_pos[$___level]}
          ___pos_to_level[$___idx]=$(( ___level -- ))
          if [[ ${___pair_map[${___input[___pair_idx]}]} = ${___input[___idx]} ]] {
            ___final_pairs[$___idx]=$___pair_idx
            ___final_pairs[$___pair_idx]=$___idx
            ___pair_order+=( $___idx )
          }
        else
          ___pos_to_level[$___idx]=-1
        fi
      fi
    }

    [[ ${match[1]} = \" && $___quoting != \' ]] && \
      if [[ $___quoting = '"' ]]; then
        ___Strings[$___level/${___Counts[$___level]}]+=" ${(q)___input[___sidx,___idx-1]}"
        ___quoting=""
      else
        ___had_quoted_value=1
        ___sidx=___idx+1
        ___quoting='"'
      fi

    [[ ${match[1]} = , && -z $___quoting ]] && \
      {
        (( !___had_quoted_value )) && \
          ___Strings[$___level/${___Counts[$___level]}]+=" ${(q)___input[___sidx,___idx-1]//((#s)[[:blank:]]##|([[:blank:]]##(#e)))}"
        ___sidx=___idx+1
        ___had_quoted_value=0
      }

    [[ ${match[1]} = : && -z $___quoting ]] && \
      {
        ___had_quoted_value=0
        ___sidx=___idx+1
      }

    [[ ${match[1]} = \' && $___quoting != \" ]] && \
      if [[ $___quoting = "'" ]]; then
        ___Strings[$___level/${___Counts[$___level]}]+=" ${(q)___input[___sidx,___idx-1]}"
        ___quoting=""
      else
        ___had_quoted_value=1
        ___sidx=___idx+1
        ___quoting="'"
      fi

    ___workbuf=${match[4]}
  }
done

local ___text ___found
if (( ___nest != 2 )) {
  integer ___pair_a ___pair_b
  for ___pair_a ( "${___pair_order[@]}" ) {
    ___pair_b="${___final_pairs[$___pair_a]}"
    ___text="${___input[___pair_b,___pair_a]}"
    if [[ $___text = [[:space:]]#\{[[:space:]]#[\"\']${___key}[\"\']* ]]; then
      ___found="$___text"
    fi
  }
}

if [[ -n $___found && $___nest -lt 2 ]] {
  .zi-parse-json "$___found" "$___key" "$___varname" 2
}

if (( ___nest == 2 )) {
  : ${(PAA)___varname::="${(kv)___Strings[@]}"}
}
