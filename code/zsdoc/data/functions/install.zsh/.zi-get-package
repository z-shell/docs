emulate -LR zsh
setopt extendedglob warncreateglobal typesetsilent noshortloops rcquotes

local user=$1 pkg=$2 plugin=$2 id_as=$3 dir=$4 profile=$5 \
  local_path=${ZI[PLUGINS_DIR]}/${3//\//---} pkgjson \
  tmpfile=${$(mktemp):-${TMPDIR:-/tmp}/zsh.xYzAbc123} \
  URL=https://raw.githubusercontent.com/z-shell/$2/HEAD/package.json

local pro_sep="{rst}, {profile}" epro_sep="{error}, {profile}" \
  tool_sep="{rst}, {cmd}" lhi_hl="{lhi}" profile_hl="{profile}"

trap "rmdir ${(qqq)local_path} 2>/dev/null; return 1" INT TERM QUIT HUP
trap "rmdir ${(qqq)local_path} 2>/dev/null" EXIT

if [[ $profile != ./* ]] {
  if { ! .zi-download-file-stdout $URL 0 1 2>/dev/null > $tmpfile } {
    rm -f $tmpfile; .zi-download-file-stdout $URL 1 1 2>/dev/null >1 $tmpfile
  }
} else {
  tmpfile=${profile%:*}
  profile=${${${(M)profile:#*:*}:+${profile#*:}}:-default}
}

pkgjson="$(<$tmpfile)"

if [[ -z $pkgjson ]]; then
  +zi-message "{u-warn}Error{b-warn}:{error} the package {apo}\`{pid}$id_as{apo}\`"\
    "{error}couldn't be found.{rst}"
  return 1
fi

local -A Strings
.zi-parse-json "$pkgjson" "plugin-info" Strings

local -A jsondata1
jsondata1=( ${(@Q)${(@z)Strings[2/1]}} )
local user=${jsondata1[user]} plugin=${jsondata1[plugin]} \
  url=${jsondata1[url]} message=${jsondata1[message]} \
  required=${jsondata1[required]:-${jsondata1[requires]}}

local -a profiles
local key value
integer pos
profiles=( ${(@Q)${(@z)Strings[2/2]}} )
profiles=( ${profiles[@]:#$'\0'--object--$'\0'} )
pos=${${(@Q)${(@z)Strings[2/2]}}[(I)$profile]}
if (( pos )) {
  for key value ( "${(@Q)${(@z)Strings[3/$(( (pos + 1) / 2 ))]}}" ) {
    (( ${+ICE[$key]} )) && [[ ${ICE[$key]} != +* ]] && continue
    ICE[$key]=$value${ICE[$key]#+}
  }
  ICE=( "${(kv)ICE[@]//\\\"/\"}" )
  [[ ${ICE[as]} = program ]] && ICE[as]="command"
  [[ -n ${ICE[on-update-of]} ]] && ICE[subscribe]="${ICE[subscribe]:-${ICE[on-update-of]}}"
  [[ -n ${ICE[pick]} ]] && ICE[pick]="${ICE[pick]//\$ZPFX/${ZPFX%/}}"
  if [[ -n ${ICE[id-as]} ]] {
    @zi-substitute 'ICE[id-as]'
    local -A map
    map=( "\"" "\\\"" "\\" "\\" )
    eval "ICE[id-as]=\"${ICE[id-as]//(#m)[\"\\]/${map[$MATCH]}}\""
  }
} else {
  +zi-message "{u-warn}Error{b-warn}:{error} the profile {apo}\`{hi}$profile{apo}\`" \
    "{error}couldn't be found, aborting. Available profiles are:" \
    "{lhi}${(pj:$epro_sep:)profiles[@]}{error}.{rst}"
  return 1
}

+zi-message "{info3}Package{ehi}:{rst} {pid}$pkg{rst}. Selected" \
  "profile{ehi}:{rst} {hi}$profile{rst}. Available" \
  "profiles:${${${(M)profile:#default}:+$lhi_hl}:-$profile_hl}" \
  "${(pj:$pro_sep:)profiles[@]}{rst}."
if [[ $profile != *bgn* && -n ${(M)profiles[@]:#*bgn*} ]] {
  +zi-message "{note}Note:{rst} The {apo}\`{profile}bgn{glob}*{apo}\`{rst}" \
    "profiles (if any are available) are the recommended ones (the reason" \
    "is that they expose the binaries provided by the package without" \
    "altering (i.e.: {slight}cluttering{rst}{…}) the {var}\$PATH{rst}" \
    "environment variable)."
}

ICE[required]=${ICE[required]:-$ICE[requires]}
local -a req
req=( ${(s.;.)${:-${required:+$required\;}${ICE[required]}}} )
for required ( $req ) {
  if [[ $required == (bgn|dl|monitor) ]]; then
    if [[ ( $required == bgn && -z ${(k)ZI_EXTS[(r)<-> z-annex-data: z-a-bin-gem-node *]} ) || \
      ( $required == dl && -z ${(k)ZI_EXTS[(r)<-> z-annex-data: z-a-patch-dl *]} ) || \
      ( $required == monitor && -z ${(k)ZI_EXTS[(r)<-> z-annex-data: z-a-readurl *]} )
    ]]; then
      local -A namemap
      namemap=( bgn Bin-Gem-Node dl Patch-Dl monitor readurl )
      +zi-message -n "{u-warn}ERROR{b-warn}: {error}the "
      if [[ -z ${(MS)ICE[required]##(\;|(#s))$required(\;|(#e))} ]]; then
        +zi-message -n "{error}requested profile {apo}\`{hi}$profile{apo}\`{error} "
      else
        +zi-message -n "{error}package {pid}$pkg{error} "
      fi
      +zi-message '{error}requires the {apo}`{annex}'${namemap[$required]}'{apo}`' \
        "{error}annex, which is currently not installed." \
        "{nl}{nl}If you'd like to install it, you can visit its homepage:" \
        "{nl}– {url}https://github.com/z-shell/z-a-${(L)namemap[$required]}{rst}" \
        "{nl}for instructions."
      (( ${#profiles[@]:#$profile} > 0 )) && \
        +zi-message "{nl}Other available profiles are:" \
        "{profile}${(pj:$pro_sep:)${profiles[@]:#$profile}}{rst}."

      return 1
    fi
  else
    if ! command -v $required &>/dev/null; then
      +zi-message -n "{u-warn}ERROR{b-warn}: {error}the "
      if [[ -n ${(MS)ICE[required]##(\;|(#s))$required(\;|(#e))} ]]; then
        +zi-message -n "{error}requested profile {apo}\`{hi}$profile{apo}\`{error} "
      else
        +zi-message -n "{error}package {pid}$pkg{error} "
      fi
      +zi-message '{error}requires a {apo}`{cmd}'$required'{apo}`{error}' \
        "command to be available in {var}\$PATH{error}.{rst}" \
        "{nl}{error}The package cannot be installed unless the" \
        "command will be available."
      (( ${#profiles[@]:#$profile} > 0 )) && \
        +zi-message "{nl}Other available profiles are:" \
          "{profile}${(pj:$pro_sep:)${profiles[@]:#$profile}}{rst}."
      return 1
    fi
  fi
}

if [[ -n ${ICE[dl]} && -z ${(k)ZI_EXTS[(r)<-> z-annex-data: z-a-patch-dl *]} ]] {
  +zi-message "{nl}{u-warn}WARNING{b-warn}:{rst} the profile uses" \
    "{ice}dl''{rst} ice however there's currently no {annex}z-a-patch-dl{rst}" \
    "annex loaded, which provides it."
  +zi-message "The ice will be inactive, i.e.: no additional" \
    "files will become downloaded (the ice downloads the given URLs)." \
    "The package should still work, as it doesn't indicate to" \
    "{u}{slight}require{rst} the annex."
  +zi-message "{nl}You can download the" \
    "annex from its homepage at {url}https://github.com/z-shell/z-a-patch-dl{rst}."
}

[[ -n ${jsondata1[message]} ]] && \
  +zi-message "{info}${jsondata1[message]}{rst}"

if (( ${+ICE[is-snippet]} )) {
  reply=( "" "$url" )
  REPLY=snippet
  return 0
}

if (( !${+ICE[git]} && !${+ICE[from]} )) {
  (
    .zi-parse-json "$pkgjson" "_from" Strings
    local -A jsondata
    jsondata=( "${(@Q)${(@z)Strings[1/1]}}" )

    local URL=${jsondata[_resolved]}
    local fname="${${URL%%\?*}:t}"

    command mkdir -p $dir || {
      +zi-message "{u-warn}Error{b-warn}:{error} Couldn't create directory:" \
        "{dir}$dir{error}, aborting.{rst}"
      return 1
    }
    builtin cd -q $dir || return 1

    +zi-message "Downloading tarball for {pid}$plugin{rst}{…}"

    if { ! .zi-download-file-stdout "$URL" 0 1 >| "$fname" } {
      if { ! .zi-download-file-stdout "$URL" 1 1 >| "$fname" } {
        command rm -f "$fname"
        +zi-message "Download of the file {apo}\`{file}$fname{apo}\`{rst}" \
          "failed. No available download tool? One of:" \
          "{cmd}${(pj:$tool_sep:)${=:-curl wget lftp lynx}}{rst}."

        return 1
      }
    }

    ziextract "$fname" --move
    return 0
  ) && {
    reply=( "$user" "$plugin" )
    REPLY=tarball
  }
} else {
    reply=( "${ICE[user]:-$user}" "${ICE[plugin]:-$plugin}" )
    if [[ ${ICE[from]} = (|gh-r|github-rel) ]]; then
      REPLY=github
    else
      REPLY=unknown
    fi
}

return $?
