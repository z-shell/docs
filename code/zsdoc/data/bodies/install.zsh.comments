# Copyright (c) 2016-2020 Sebastian Gniazdowski and contributors.
# Copyright (c) 2021 Salvydas Lukosius and Z-Shell ZI contributors.

# FUNCTION: .zi-parse-json [[[
# Retrievies the ice-list from given profile from the JSON of the package.json.
# ]]]
# FUNCTION: .zi-get-package [[[ # ]]]
# FUNCTION: .zi-setup-plugin-dir [[[
# Clones given plugin into PLUGIN_DIR. Supports multiple
# sites (respecting `from' and `proto' ice modifiers).
# Invokes compilation of plugin's main file.
#
# $1 - user
# $2 - plugin # ]]]
# FUNCTION: .zi-install-completions [[[
# Installs all completions of given plugin. After that they are
# visible to `compinit'. Visible completions can be selectively
# disabled and enabled. User can access completion data with
# `clist' or `completions' subcommand.
#
# $1 - plugin spec (4 formats: user---plugin, user/plugin, user, plugin)
# $2 - plugin (only when $1 - i.e. user - given)
# $3 - if 1, then reinstall, otherwise only install completions that aren't there # ]]]
# FUNCTION: .zi-compinit [[[
# User-exposed `compinit' frontend which first ensures that all completions managed by ❮ ZI ❯ are forgotten by Z-shell.
# After that it runs normal `compinit', which should more easily detect ❮ ZI ❯ completions.
#
# No arguments. # ]]]
# FUNCTION: .zi-download-file-stdout [[[
# Downloads file to stdout. Supports following backend commands:
# curl, wget, lftp, lynx. Used by snippet loading. # ]]]
# FUNCTION: .zi-get-url-mtime [[[
# For the given URL returns the date in the Last-Modified header as a time stamp # ]]]
# FUNCTION: .zi-mirror-using-svn [[[
# Used to clone subdirectories from Github. If in update mode (see $2), then invokes `svn update',
# in normal mode invokes `svn checkout --non-interactive -q <URL>'. In test mode only
# compares remote and local revision and outputs true if update is needed.
#
# $1 - URL
# $2 - mode, "" - normal, "-u" - update, "-t" - test
# $3 - subdirectory (not path) with working copy, needed for -t and -u
# ]]]
# FUNCTION: .zi-forget-completion [[[
# Implements alternation of Zsh state so that already initialized
# completion stops being visible to Zsh.
#
# $1 - completion function name, e.g. "_cp"; can also be "cp" # ]]]
# FUNCTION: .zi-compile-plugin [[[
# Compiles given plugin (its main source file, and also an additional "....zsh" file if it exists).
#
# $1 - plugin spec (4 formats: user---plugin, user/plugin, user, plugin)
# $2 - plugin (only when $1 - i.e. user - given) # ]]]
# FUNCTION: .zi-download-snippet [[[
# Downloads snippet – either a file – with curl, wget, lftp or lynx, or a directory,
# with Subversion – when svn-ICE is active. Github supports Subversion protocol and allows
# to clone subdirectories. This is used to provide a layer of support for Oh-My-Zsh and Prezto.
# ]]]
# FUNCTION: .zi-update-snippet [[[
# ]]]
# FUNCTION: .zi-get-latest-gh-r-url-part [[[
# Gets version string of latest release of given Github package.
# Connects to Github releases page.
# ]]]
# FUNCTION: ziextract [[[
# If the file is an archive, it is extracted by this function.
# Next stage is scanning of files with the common utility `file',
# to detect executables. They are given +x mode. There are also
# messages to the user on performed actions.
#
# $1 - url
# $2 - file # ]]]
# FUNCTION: .zi-extract() [[[
# ]]]
# FUNCTION: zpextract [[[
# ]]]
# FUNCTION: .zi-at-eval [[[ # ]]]
# FUNCTION: .zi-get-cygwin-package [[[
# ]]]
# FUNCTION zicp [[[
# ]]]
# FUNCTION zimv [[[
# ]]]
# FUNCTION: ∞zi-reset-opt-hook [[[ # ]]]
# FUNCTION: ∞zi-make-ee-hook [[[ # ]]]
# FUNCTION: ∞zi-make-e-hook [[[ # ]]]
# FUNCTION: ∞zi-make-hook [[[ # ]]]
# FUNCTION: ∞zi-atclone-hook [[[ # ]]]
# FUNCTION: ∞zi-extract-hook [[[ # ]]]
# FUNCTION: ∞zi-mv-hook [[[ # ]]]
# FUNCTION: ∞zi-cp-hook [[[ # ]]]
# FUNCTION: ∞zi-compile-plugin-hook [[[ # ]]]
# FUNCTION: ∞zi-atpull-e-hook [[[ # ]]]
# FUNCTION: ∞zi-atpull-hook [[[ # ]]]
# FUNCTION: ∞zi-ps-on-update-hook [[[ # ]]]
