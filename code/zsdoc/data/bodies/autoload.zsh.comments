# Copyright (c) 2016-2020 Sebastian Gniazdowski and contributors.
# Copyright (c) 2021 Salvydas Lukosius and Z-Shell ZI contributors.

#
# Backend, low level functions
#

# FUNCTION: .zi-unregister-plugin [[[
# Removes the plugin from ZI_REGISTERED_PLUGINS array and from the
# zsh_loaded_plugins array (managed according to the plugin standard) # ]]]
# FUNCTION: .zi-diff-functions-compute [[[
# Computes FUNCTIONS that holds new functions added by plugin.
# Uses data gathered earlier by .zi-diff-functions().
#
# $1 - user/plugin # ]]]
# FUNCTION: .zi-diff-options-compute [[[
# Computes OPTIONS that holds options changed by plugin.
# Uses data gathered earlier by .zi-diff-options().
#
# $1 - user/plugin # ]]]
# FUNCTION: .zi-diff-env-compute [[[
# Computes ZI_PATH, ZI_FPATH that hold (f)path components
# added by plugin. Uses data gathered earlier by .zi-diff-env().
#
# $1 - user/plugin # ]]]
# FUNCTION: .zi-diff-parameter-compute [[[
# Computes ZI_PARAMETERS_PRE, ZI_PARAMETERS_POST that hold
# parameters created or changed (their type) by plugin. Uses
# data gathered earlier by .zi-diff-parameter().
#
# $1 - user/plugin # ]]]
# FUNCTION: .zi-any-to-uspl2 [[[
# Converts given plugin-spec to format that's used in keys for hash tables.
# So basically, creates string "user/plugin" (this format is called: uspl2).
#
# $1 - plugin spec (4 formats: user---plugin, user/plugin, user, plugin)
# $2 - (optional) plugin (only when $1 - i.e. user - given) # ]]]
# FUNCTION: .zi-save-set-extendedglob [[[
# Enables extendedglob-option first saving if it was already
# enabled, for restoration of this state later. # ]]]
# FUNCTION: .zi-restore-extendedglob [[[
# Restores extendedglob-option from state saved earlier. # ]]]
# FUNCTION: .zi-prepare-readlink [[[
# Prepares readlink command, used for establishing completion's owner.
#
# $REPLY = ":" or "readlink" # ]]]
# FUNCTION: .zi-clear-report-for [[[
# Clears all report data for given user/plugin. This is done by resetting all related global ZI_* hashes.
#
# $1 - plugin spec (4 formats: user---plugin, user/plugin, user, plugin)
# $2 - (optional) plugin (only when $1 - i.e. user - given) # ]]]
# FUNCTION: .zi-exists-message [[[
# Checks if plugin is loaded. Testable. Also outputs error message if plugin is not loaded.
#
# $1 - plugin spec (4 formats: user---plugin, user/plugin, user, plugin)
# $2 - (optional) plugin (only when $1 - i.e. user - given) # ]]]
# FUNCTION: .zi-at-eval [[[ # ]]]

#
# Format functions
#

# FUNCTION: .zi-format-functions [[[
# Creates a one or two columns text with functions created by given plugin.
#
# $1 - user/plugin (i.e. uspl2 format of plugin-spec) # ]]]
# FUNCTION: .zi-format-options [[[
# Creates one-column text about options that changed when plugin "$1" was loaded.
#
# $1 - user/plugin (i.e. uspl2 format of plugin-spec) # ]]]
# FUNCTION: .zi-format-env [[[
# Creates one-column text about FPATH or PATH elements added when given plugin was loaded.
#
# $1 - user/plugin (i.e. uspl2 format of plugin-spec)
# $2 - if 1, then examine PATH, if 2, then examine FPATH # ]]]
# FUNCTION: .zi-format-parameter [[[
# Creates one column text that lists global parameters that changed when the given plugin was loaded.
#
# $1 - user/plugin (i.e. uspl2 format of plugin-spec) # ]]]

#
# Completion functions
#

# FUNCTION: .zi-get-completion-owner [[[
# Returns "user---plugin" string (uspl1 format) of plugin that owns given completion.
#
# Both :A and readlink will be used, then readlink's output if results differ. Readlink might not be available.
#
# :A will read the link "twice" and give the final repository
# directory, possibly without username in the uspl format; readlink will read the link "once"
#
# $1 - absolute path to completion file (in COMPLETIONS_DIR)
# $2 - readlink command (":" or "readlink") # ]]]
# FUNCTION: .zi-get-completion-owner-uspl2col [[[
# For shortening of code - returns colorized plugin name
# that owns given completion.
#
# $1 - absolute path to completion file (in COMPLETIONS_DIR)
# $2 - readlink command (":" or "readlink") # ]]]
# FUNCTION: .zi-find-completions-of-plugin [[[
# Searches for completions owned by given plugin.
# Returns them in `reply' array.
#
# $1 - plugin spec (4 formats: user---plugin, user/plugin, user, plugin)
# $2 - plugin (only when $1 - i.e. user - given) # ]]]
# FUNCTION: .zi-check-comp-consistency [[[
# ❮ ZI ❯ creates symlink for each installed completion.
# This function checks whether given completion (i.e.
# file like "_mkdir") is indeed a symlink. Backup file
# is a completion that is disabled - has the leading "_" removed.
#
# $1 - path to completion within plugin's directory
# $2 - path to backup file within plugin's directory # ]]]
# FUNCTION: .zi-check-which-completions-are-installed [[[
# For each argument that each should be a path to completion
# within a plugin's dir, it checks whether that completion
# is installed - returns 0 or 1 on corresponding positions in reply.
#
# $1, ... - path to completion within plugin's directory # ]]]
# FUNCTION: .zi-check-which-completions-are-enabled [[[
# For each argument that each should be a path to completion
# within a plugin's dir, it checks whether that completion
# is disabled - returns 0 or 1 on corresponding positions in reply.
#
# Uninstalled completions will be reported as "0" - i.e. disabled
#
# $1, ... - path to completion within plugin's directory # ]]]
# FUNCTION: .zi-uninstall-completions [[[
# Removes all completions of given plugin from Zshell (i.e. from FPATH).
# The FPATH is typically `~/.zi/completions/'.
#
# $1 - plugin spec (4 formats: user---plugin, user/plugin, user, plugin)
# $2 - plugin (only when $1 - i.e. user - given) # ]]]

#
# User-exposed functions
#

# FUNCTION: .zi-pager [[[
# BusyBox less lacks the -X and -i options, so it can use more # ]]]
# FUNCTION: .zi-self-update [[[
# Updates ❮ ZI ❯ code (does a git pull).
#
# User-action entry point. # ]]]
# FUNCTION: .zi-show-registered-plugins [[[
# Lists loaded plugins (subcommands list, loaded).
#
# User-action entry point. # ]]]
# FUNCTION: .zi-unload [[[
# 0. Call the Zsh Plugin's Standard *_plugin_unload function
# 0. Call the code provided by the Zsh Plugin's Standard @zsh-plugin-run-at-update
# 1. Delete bindkeys (...)
# 2. Delete Zstyles
# 3. Restore options
# 4. Remove aliases
# 5. Restore Zle state
# 6. Unfunction functions (created by plugin)
# 7. Clean-up FPATH and PATH
# 8. Delete created variables
# 9. Forget the plugin
#
# User-action entry point.
#
# $1 - plugin spec (4 formats: user---plugin, user/plugin, user, plugin)
# $2 - plugin (only when $1 - i.e. user - given) # ]]]
# FUNCTION: .zi-show-report [[[
# Displays report of the plugin given.
#
# User-action entry point.
#
# $1 - plugin spec (4 formats: user---plugin, user/plugin, user (+ plugin in $2), plugin)
# $2 - plugin (only when $1 - i.e. user - given) # ]]]
# FUNCTION: .zi-show-all-reports [[[
# Displays reports of all loaded plugins.
#
# User-action entry point. # ]]]
# FUNCTION: .zi-show-debug-report [[[
# Displays dtrace report (data recorded in interactive session).
#
# User-action entry point. # ]]]
# FUNCTION: .zi-update-or-status [[[
# Updates (git pull) or does `git status' for given plugin.
#
# User-action entry point.
#
# $1 - "status" for status, other for update
# $2 - plugin spec (4 formats: user---plugin, user/plugin, user (+ plugin in $2), plugin)
# $3 - plugin (only when $1 - i.e. user - given) # ]]]
# FUNCTION: .zi-update-or-status-snippet [[[
#
# Implements update or status operation for snippet given by URL.
#
# $1 - "status" or "update"
# $2 - snippet URL # ]]]
# FUNCTION: .zi-update-or-status-all [[[
# Updates (git pull) or does `git status` for all existing plugins.
# This includes also plugins that are not loaded into Zsh (but exist
# on disk). Also updates (i.e. redownloads) snippets.
#
# User-action entry point. # ]]]
# FUNCTION: .zi-update-in-parallel [[[
# ]]]
# FUNCTION: .zi-wait-for-update-jobs [[[ # ]]]
# FUNCTION: .zi-show-zstatus [[[
# Shows ❮ ZI ❯ status, i.e. number of loaded plugins,
# of available completions, etc.
#
# User-action entry point. # ]]]
# FUNCTION: .zi-show-times [[[
# Shows loading times of all loaded plugins.
#
# User-action entry point. # ]]]
# FUNCTION: .zi-list-bindkeys [[[ # ]]]
# FUNCTION: .zi-compiled [[[
# Displays list of plugins that are compiled.
#
# User-action entry point. # ]]]
# FUNCTION: .zi-compile-uncompile-all [[[
# Compiles or uncompiles all existing (on disk) plugins.
#
# User-action entry point. # ]]]
# FUNCTION: .zi-uncompile-plugin [[[
# Uncompiles given plugin.
#
# User-action entry point.
#
# $1 - plugin spec (4 formats: user---plugin, user/plugin, user (+ plugin in $2), plugin)
# $2 - plugin (only when $1 - i.e. user - given) # ]]]

# FUNCTION: .zi-show-completions [[[
# Display installed (enabled and disabled), completions. Detect
# stray and improper ones.
#
# Completions live even when plugin isn't loaded - if they are
# installed and enabled.
#
# User-action entry point. # ]]]
# FUNCTION: .zi-clear-completions [[[
# Delete stray and improper completions.
#
# Completions live even when plugin isn't loaded - if they are
# installed and enabled.
#
# User-action entry point. # ]]]
# FUNCTION: .zi-search-completions [[[
# While .zi-show-completions() shows what completions are
# installed, this functions searches through all plugin dirs
# showing what's available in general (for installation).
#
# User-action entry point. # ]]]
# FUNCTION: .zi-cenable [[[
# Disables given installed completion.
#
# User-action entry point.
#
# $1 - e.g. "_mkdir" or "mkdir" # ]]]
# FUNCTION: .zi-cdisable [[[
# Enables given installed completion.
#
# User-action entry point.
#
# $1 - e.g. "_mkdir" or "mkdir" # ]]]

# FUNCTION: .zi-cd [[[
# Jumps to plugin's directory (in ❮ ZI ❯ home directory).
#
# User-action entry point.
#
# $1 - plugin spec (4 formats: user---plugin, user/plugin, user, plugin)
# $2 - plugin (only when $1 - i.e. user - given) # ]]]
# FUNCTION: .zi-run-delete-hooks [[[ # ]]]
# FUNCTION: .zi-delete [[[
# Deletes plugin's or snippet's directory (in ❮ ZI ❯ home directory).
#
# User-action entry point.
#
# $1 - snippet URL or plugin spec (4 formats: user---plugin, user/plugin, user, plugin)
# $2 - plugin (only when $1 - i.e. user - given) # ]]]
# FUNCTION: .zi-confirm [[[
# Prints given question, waits for "y" key, evals given expression if "y" obtained
#
# $1 - question
# $2 - expression # ]]]
# FUNCTION: .zi-changes [[[
# Shows `git log` of given plugin.
#
# User-action entry point.
#
# $1 - plugin spec (4 formats: user---plugin, user/plugin, user, plugin)
# $2 - plugin (only when $1 - i.e. user - given) # ]]]
# FUNCTION: .zi-recently [[[
# Shows plugins that obtained commits in specified past time.
#
# User-action entry point.
#
# $1 - time spec, e.g. "1 week" # ]]]
# FUNCTION: .zi-create [[[
# Creates a plugin, also on Github (if not "_local/name" plugin).
#
# User-action entry point.
#
# $1 - (optional) plugin spec (4 formats: user---plugin, user/plugin, user, plugin)
# $2 - (optional) plugin (only when $1 - i.e. user - given) # ]]]
# FUNCTION: .zi-glance [[[
# Shows colorized source code of plugin. Is able to use pygmentize,
# highlight, GNU source-highlight.
#
# User-action entry point.
#
# $1 - plugin spec (4 formats: user---plugin, user/plugin, user, plugin)
# $2 - plugin (only when $1 - i.e. user - given) # ]]]
# FUNCTION: .zi-edit [[[
# Runs $EDITOR on source of given plugin. If the variable is not set then defaults to `code'.
#
# User-action entry point.
#
# $1 - plugin spec (4 formats: user---plugin, user/plugin, user, plugin)
# $2 - plugin (only when $1 - i.e. user - given) # ]]]
# FUNCTION: .zi-stress [[[
# Compiles plugin with various options on and off to see how well the code is written. The options are:
#
# NO_SHORT_LOOPS, IGNORE_BRACES, IGNORE_CLOSE_BRACES, SH_GLOB, CSH_JUNKIE_QUOTES, NO_MULTI_FUNC_DEF.
#
# User-action entry point.
#
# $1 - plugin spec (4 formats: user---plugin, user/plugin, user, plugin)
# $2 - plugin (only when $1 - i.e. user - given) # ]]]
# FUNCTION: .zi-list-compdef-replay [[[
# Shows recorded compdefs (called by plugins loaded earlier). Plugins often call `compdef' hoping
# for `compinit' being already ran. ❮ ZI ❯ solves this by recording compdefs.
#
# User-action entry point. # ]]]
# FUNCTION: .zi-ls [[[ # ]]]
# FUNCTION: .zi-get-path [[[
# Returns path of given ID-string, which may be a plugin-spec (like "user/plugin" or "user" "plugin"), an absolute path
# ("%" "/home/..." and also "%SNIPPETS/..." etc.), or a plugin nickname (i.e. id-as'' ice-mod), or a snippet nickname. # ]]]
# FUNCTION: .zi-recall [[[ # ]]]
# FUNCTION: .zi-module [[[
# Function that has sub-commands passed as long-options (with two dashes, --).
# It's an attempt to plugin only this one function into `zi' function
# defined in zi.zsh, to not make this file longer than it's needed. # ]]]
# FUNCTION: .zi-build-module [[[
# Performs ./configure && make on the module and displays information how to load the module in .zshrc.
# ]]]

#
# Help function
#

# FUNCTION: .zi-help [[[
# Shows usage information.
#
# User-action entry point. # ]]]
# FUNCTION: .zi-analytics-menu [[[
# Shows ❮ ZI ❯ analytics.
#
# User-action entry point. # ]]]
# FUNCTION: .zi-control-menu [[[
# Shows control options.
#
# User-action entry point. # ]]]
